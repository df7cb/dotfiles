#!/bin/sh

set -eu

CLEAN=yes
GIT=git
PACKAGE=$(dpkg-parsechangelog -SSource)

while getopts "cg" opt ; do
  case $opt in
    c) CLEAN="" ;;
    g) GIT="" ;;
    *) exit 5 ;;
  esac
done
# shift away args
shift $(($OPTIND - 1))

distribution=$(dpkg-parsechangelog -Sdistribution)
if [ "$distribution" = "UNRELEASED" ]; then
  echo "Distribution is UNRELEASED. Fix that before uploading."
  exit 1
fi

[ "$CLEAN" ] && dclean
qpop -a || [ $? = 2 ]
echo

changes=$(ls -t ../*.changes | head -1)
printf '\e[1;34m'
ls -l $changes
printf '\e[0;34m'
cat $changes
printf '\e[0m'

echo
[ -d .git ] && git --no-pager status

# sanity checks
if [ -f debian/source/lintian-overrides ] && grep changelog-should-mention-nmu debian/source/lintian-overrides; then
  printf '\e[1;31mObsolete lintian overrides found\e[0m\n'
fi
if grep -q postgres debian/control* && ! grep -q Rules-Requires-Root debian/control; then
  printf '\e[1;31mRules-Requires-Root: no missing\e[0m\n'
fi
if [ ! -f debian/gitlab-ci.yml ] && [ ! -f debian/salsa-ci.yml ]; then
  printf '\e[1;31mNo debian/gitlab-ci.yml found\e[0m\n'
fi
if [ -f debian/watch ] && grep -q /releases debian/watch; then
  printf '\e[1;31mdebian/watch references /releases instead of /tags\e[0m\n'
fi
case $changes in
  *_source*) ;;
  *) printf '\e[1;31mArchitecture-dependant changes file\e[0m\n'
     ;;
esac

export GPG_TTY="$(tty)"
gpg-connect-agent updatestartuptty /bye > /dev/null

if [ "$GIT" ]; then
  echo
  echo -n "$PACKAGE: Push? "
  read push

  grep -E '^Vcs|^Homepage' debian/control || :
  if grep -q postgres debian/control*; then
    URL="https://pgdgbuild.dus.dg-i.net/job/$PACKAGE/build"
    printf "\e[1m$URL\e[0m\n"
    x-www-browser "$URL" &
  fi

  echo -n "git pull ... "
  git pull --ff-only

  if git status -s | grep -q '^[^?]'; then
    git add -u debian
    debcommit
  fi

  # check which branches exist locally
  BRANCHES=$(git branch | grep '^\*' | cut -d ' ' -f 2)
  for branch in upstream debian/upstream pristine-lfs pristine-tar; do
    if git branch | grep -Eqx "^\*? ? ?$branch"; then
      BRANCHES="$BRANCHES $branch"
    fi
  done
  # check which branches need pushing
  for branch in $BRANCHES; do
    mine=$(git rev-parse $branch)
    origin=$(git rev-parse origin/$branch 2> /dev/null || :) # branch might not exist yet
    if [ "$mine" != "$origin" ]; then
      PUSH_BRANCHES="${PUSH_BRANCHES:+$PUSH_BRANCHES }$branch"
    fi
  done
  if [ "${PUSH_BRANCHES:-}" ]; then
    echo -n "git npush origin $PUSH_BRANCHES ... "
    git npush origin $PUSH_BRANCHES
  fi
fi

echo
echo -n "$PACKAGE: Upload? "
read upload

if [ "$GIT" ]; then
  version=$(dpkg-parsechangelog -SVersion)
  tag="debian/$(echo $version | tr ':~' '%_')"
  if ! git tag | grep -q "^$tag$"; then
    ( set -x; git tag -s -m "tagging $PACKAGE $version" "$tag" )
  fi
  echo -n "git push ... "
  git push
fi
set -x
debsign $changes
dput $changes
